{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/web/serona/web/app/api/agent/chat/route.ts"],"sourcesContent":["export const runtime = 'edge';\n\nimport { openai } from '@ai-sdk/openai';\nimport { generateObject, generateText } from \"ai\";\nimport { z } from 'zod';\n\nexport async function POST(req: Request) {\n    const model = openai('gpt-4o');\n\n    // the full transcription of the patient data\n    const { transcription } = await req.json();\n\n    // TODO: PII check (later)\n\n    // Step 1: Classification prompt\n    const { object: classification } = await generateObject({\n        model,\n        schema: z.object({\n          reasoning: z.string().describe('Brief explanation for the classification decision'),\n          type: z.enum(['RESEARCH_AGENT', 'NORMAL']).describe('RESEARCH_AGENT if rare/complex case needing research, otherwise NORMAL'),\n          complexity: z.enum(['simple', 'complex']).describe('simple for routine cases, complex for multi-system or unclear cases'),\n        }),\n        system: `You are a medical classification AI. Your job is to analyze medical transcripts and classify them into categories.\n\nReturn a JSON object with:\n- reasoning: string explaining your decision\n- type: \"RESEARCH_AGENT\" or \"NORMAL\"\n- complexity: \"simple\" or \"complex\"`,\n        prompt: `Classify this medical transcript:\n\n\"${transcription}\"\n\nGuidelines:\n- RESEARCH_AGENT: rare conditions, complex drug interactions, unusual presentations, need for latest guidelines\n- NORMAL: routine visits, common conditions, standard treatments\n- simple: single issue, clear diagnosis\n- complex: multiple issues, uncertain diagnosis, complex case`,\n      });\n\n\n    // Step 2: If RESEARCH_AGENT, create Exa research task\n    let researchId = null;\n    let researchData = null;\n\n    if (classification.type === 'NORMAL') {\n      console.log(\"üî¨ Creating Exa research task for complex medical case...\");\n\n      const exaApiKey = process.env.EXA_API_KEY;\n\n      if (!exaApiKey) {\n        console.warn(\"‚ö†Ô∏è EXA_API_KEY not configured, skipping research\");\n      } else {\n        try {\n          // Create research task\n          const researchResponse = await fetch('https://api.exa.ai/research/v1', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${exaApiKey}`,\n            },\n            body: JSON.stringify({\n              model: classification.complexity === 'complex' ? 'exa-research-pro' : 'exa-research',\n              instructions: `Research the following medical case for latest treatment protocols, rare conditions, and evidence-based recommendations:\n\nTranscription: \"${transcription}\"\n\nClassification reasoning: ${classification.reasoning}\n\nPlease research:\n1. Latest clinical guidelines for mentioned conditions\n2. Current treatment protocols and best practices\n3. Drug interactions and contraindications\n4. Specialist recommendations\n5. Evidence-based recommendations from medical literature\n\nFocus on providing actionable, evidence-based medical information.`,\n            }),\n          });\n\n          const research = await researchResponse.json();\n          researchId = research.researchId;\n\n          console.log(\"üî¨ Research task created:\", researchId);\n\n          // Poll for completion (with timeout)\n          const maxPolls = 30; // 30 seconds max\n          let polls = 0;\n\n          while (polls < maxPolls) {\n            await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\n\n            const statusResponse = await fetch(`https://api.exa.ai/research/v1/${researchId}`, {\n              headers: {\n                'Authorization': `Bearer ${exaApiKey}`,\n              },\n            });\n\n            const status = await statusResponse.json();\n\n            if (status.status === 'completed') {\n              researchData = status.output.content;\n              console.log(\"‚úÖ Research completed\");\n              break;\n            } else if (status.status === 'failed') {\n              console.error(\"‚ùå Research failed:\", status.error);\n              break;\n            }\n\n            polls++;\n          }\n        } catch (error) {\n          console.error(\"‚ùå Exa research error:\", error);\n        }\n      }\n    }\n\n    // Step 3: Generate medical analysis (with research if available)\n    const analysisPrompt = researchData\n      ? `Analyze this medical conversation using the research findings below:\n\nTRANSCRIPTION:\n\"${transcription}\"\n\nRESEARCH FINDINGS:\n${researchData}\n\nProvide a comprehensive analysis incorporating the research findings with sections: Symptoms, Diagnoses, Medications, Follow-up Actions, Concerns, Research-Based Recommendations.`\n      : `Analyze this medical conversation transcription:\\n\\n\"${transcription}\"\\n\\nProvide analysis with sections: Symptoms, Diagnoses, Medications, Follow-up Actions, Concerns.`;\n\n    const { text: response } = await generateText({\n        model: classification.complexity === 'simple' ? openai('gpt-4o-mini') : openai('gpt-4o'),\n        system: classification.type === 'RESEARCH_AGENT'\n          ? `You are an expert medical research analyst. Provide detailed analysis of complex medical cases with research-backed insights.\n\nYour analysis should include:\n1. SESSION SUMMARY - Brief overview and primary complaints\n2. CRITICAL FINDINGS - Flag severe symptoms, dangerous vitals, medication issues (format: **[CRITICAL - IMMEDIATE ACTION REQUIRED]** with urgency level)\n3. KEY MEDICAL INSIGHTS - Diagnosis, symptoms, treatment plan, medications, follow-ups\n4. RESEARCH-BASED RECOMMENDATIONS - Evidence-based recommendations from latest medical literature\n5. CARE QUALITY NOTES - Documentation completeness, patient education, guideline adherence`\n          : `You are a medical AI assistant analyzing patient-doctor conversations.\n\nYour role is to:\n1. Extract key medical information and symptoms\n2. Identify diagnoses or conditions discussed\n3. Note any medications or treatments mentioned\n4. Highlight follow-up actions or next steps\n5. Flag any urgent concerns\n\nProvide a structured, clear analysis that's helpful for medical record keeping.`,\n        prompt: analysisPrompt,\n      });\n\n      console.log(\"üöÄ ~ POST ~ class type:\", classification.type);\n      console.log(\"üöÄ ~ POST ~ response length:\", response.length);\n\n      return Response.json({\n        response,\n        classification,\n        ...(researchId && { researchId }),\n        ...(researchData && { researchIncluded: true }),\n      });\n}"],"names":[],"mappings":"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"}}]
}